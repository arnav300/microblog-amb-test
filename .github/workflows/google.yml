name: CI for microblog

on:
  push:
    branches: [master]
#  workflow_run:
#    workflows: ["Minikube test workflow"]
#    types:
#      - completed

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest

    services:
      backend-db:
        image: mysql:5.6
        env:
          MYSQL_USER: microblog
          MYSQL_PASSWORD: password
          MYSQL_ROOT_HOST: '%'
          MYSQL_DATABASE: microblog
          MYSQL_ROOT_PASSWORD: password
        ports:
        - 3306:3306
      
    steps:

    - name: Checkout working branch
      uses: actions/checkout@v1

    - name: Setup ssh
      run: |
        mkdir ~/.ssh/
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        touch ~/.ssh/known_hosts
        ssh-keyscan github.com >> ~/.ssh/known_hosts
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.5

    
        
    - name: Cache Poetry
      uses: actions/cache@v1
      id: cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Installing Falsk
      run: |
        pip install Flask
        pip install flask_sqlalchemy
        pip install flask_migrate
        pip install flask_login
        pip install flask_mail
        pip install flask_bootstrap
        pip install flask_moment
        pip install flask_babel
        pip install python-dotenv
    
    - name: Installing Elastisearch
      run: |
        curl -fsSL https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
        echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-7.x.list
        sudo apt update
        sudo apt-get install elasticsearch

    - name: Install gettext for translations
      run: |
        sudo apt-get update && sudo apt-get install -y gettext
    - name: Install Redis
      run: |
        sudo apt-get update && sudo apt-get install redis-server
#    - name: Test with pytest
#      run: 
#        python tests.py compilemessages
#        pytest --verbose
  

  Minikube:
     
        name: Example Minikube-Kubernetes Cluster interaction
        needs: [tests]
        runs-on: ubuntu-latest
        steps:
          - name: Checkout
            uses: actions/checkout@v1
          - name: Setup Minikube
            uses: manusa/actions-setup-minikube@v2.4.2
            with:
              minikube version: 'v1.16.0'
              kubernetes version: 'v1.19.2'
              github token: ${{ secrets.GITHUB_TOKEN }}
          - name: Interact with the cluster
            run: |
              kubectl get nodes
              kubectl get pods
              minikube ip
              git clone https://github.com/arnav300/microblog-amb-test.git
              cd microblog-amb-test/TW-final
              kubectl get pods
              sleep 20
              kubectl apply -f .
              kubectl get pods
              sleep 100
              kubectl get pods -o wide
              sleep 300
              kubectl get deployments
              kubectl get pods -o wide
              sleep 200
              kubectl get pods    

  docker-image:

    name: Build & Publish Docker Image
    needs: [tests]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout working branch
        uses: actions/checkout@v1

      - name: Set Docker Registry
        run: echo ::set-env name=DOCKER_REGISTRY::eu.gcr.io

      - name: Set Docker Image
        run: echo ::set-env name=DOCKER_IMAGE::${{ env.DOCKER_REGISTRY }}/acme-555555/backend

      - uses: actions/checkout@v1
      - name: Login to gcloud registry
        id: gcloud
        uses: elgohr/gcloud-login-action@0.2
        with:
          account_key: ${{ secrets.GCLOUD_KEY }}

      - name: Publish Docker Image
        uses: elgohr/Publish-Docker-Github-Action@2.14
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        with:
          name: ${{ env.DOCKER_IMAGE }}
          username: ${{ steps.gcloud.outputs.username }}
          password: ${{ steps.gcloud.outputs.password }}
          registry: ${{ env.DOCKER_REGISTRY }}
          buildargs: SSH_PRIVATE_KEY