name: CI for microblog

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
#  workflow_run:
#    workflows: ["Minikube test workflow"]
#    types:
#      - completed

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest

    services:
      backend-db:
        image: mysql:5.6
        env:
          MYSQL_USER: microblog
          MYSQL_PASSWORD: password
          MYSQL_ROOT_HOST: '%'
          MYSQL_DATABASE: microblog
          MYSQL_ROOT_PASSWORD: password
        ports:
        - 3306:3306
      
    steps:

    - name: Checkout working branch
      uses: actions/checkout@v1

    - name: Setup ssh
      run: |
        mkdir ~/.ssh/
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        touch ~/.ssh/known_hosts
        ssh-keyscan github.com >> ~/.ssh/known_hosts
    - name: Set up Python 3.5
      uses: actions/setup-python@v1
      with:
        python-version: 3.5

    
        
    - name: Cache
      uses: actions/cache@v2
      id: cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Installing dependencies
      run: |
        pip install Flask
        pip install flask_sqlalchemy
        pip install flask_migrate
        pip install flask_login
        pip install flask_mail
        pip install flask_bootstrap
        pip install flask_moment
        pip install flask_babel
        pip install python-dotenv
    
    - name: Installing Elastisearch
      run: |
        curl -fsSL https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
        echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-7.x.list
        sudo apt update
        sudo apt-get install elasticsearch
    - name: Install gettext for translations
      run: |
        sudo apt-get update && sudo apt-get install -y gettext
    - name: Install Redis
      run: |
        sudo apt-get update && sudo apt-get install redis-server
#    - name: Test with pytest
#      run: 
#        python tests.py compilemessages
#        pytest --verbose
  

  Minikube:
     
        name: Example Minikube-Kubernetes Cluster interaction
        needs: [tests, docker-image]
        runs-on: ubuntu-latest
        steps:
          - name: Checkout
            uses: actions/checkout@v1
          - name: Setup Minikube
            uses: manusa/actions-setup-minikube@v2.4.2
            with:
              minikube version: 'v1.16.0'
              kubernetes version: 'v1.19.2'
              github token: ${{ secrets.GITHUB_TOKEN }}
          - name: Interact with the cluster
            run: |
              kubectl get nodes
              kubectl get pods
              minikube ip
              git clone https://github.com/arnav300/microblog-amb-test.git
              cd microblog-amb-test/TW-final
              kubectl get pods
              sleep 20
              kubectl apply -f .
              kubectl get pods
              sleep 100
              kubectl get pods -o wide
              sleep 300
              kubectl get deployments
              kubectl get pods -o wide
              sleep 200
              kubectl get pods    
  docker-image:

    name: Build & Publish Docker Image
    needs: [tests]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout working branch
        uses: actions/checkout@v1

      - name: Set Docker Registry
        run: |
          echo "DOCKER_REGISTRY=eu.gcr.io" >> $GITHUB_ENV

      - name: Set Docker Image
        run: |
          echo "DOCKER_IMAGE=${{ env.DOCKER_REGISTRY }}/plexiform-style-313916/microblog" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

#      - name: Cache Docker layers
#        uses: actions/cache@v2
#        with:
#          path: /tmp/.buildx-cache
#          key: ${{ runner.os }}-buildx-${{ github.sha }}
#          restore-keys: |
#            ${{ runner.os }}-buildx-

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags:  ${{ secrets.DOCKER_HUB_USERNAME }}/gcp:latest
          
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Login to gcloud registry
        id: gcloud
        uses: elgohr/gcloud-login-action@0.2
        with:
          account_key: ${{ secrets.GCLOUD_KEY_GCP }}
        
      - name: Publish Docker Image
        uses: elgohr/Publish-Docker-Github-Action@2.14
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        with:
          name: ${{ env.DOCKER_IMAGE }}
          username: ${{ steps.gcloud.outputs.username }}
          password: ${{ steps.gcloud.outputs.password }}
          registry: ${{ env.DOCKER_REGISTRY }}
          buildargs: SSH_PRIVATE_KEY


  deployment:
      name: Deploy app to cluster
      runs-on: 'ubuntu-latest'
      needs: [docker-image]
      steps:
        - name: Checkout working branch
          uses: actions/checkout@v1
        - name: Cluster env for production
          run: |
            echo "CLUSTER_ENV=prod" >> $GITHUB_ENV
        - name: Cluster env for staging/dev
          if: "github.event.release.prerelease"
          run: |
            BRANCH=$(git branch -r --contains ${GITHUB_SHA} | grep "")
            MASTER_BRANCH_NAME='origin/master'
            if [[ "$BRANCH" == *"$MASTER_BRANCH_NAME"* ]]; then
              echo "CLUSTER_ENV=stage" >> $GITHUB_ENV

            else
              echo echo "CLUSTER_ENV=dev" >> $GITHUB_ENV

            fi
        - name: Set Cluster credentials
          run: |
            echo "CLUSTER_NAME=${{ env.CLUSTER_ENV }}" >> $GITHUB_ENV
            echo "CLUSTER_ZONE=asia-east1-a" >> $GITHUB_ENV
            echo "PROJECT_NAME=My First Project" >> $GITHUB_ENV
        
        
        - name: Install helm
          run: |
            curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
            chmod 700 get_helm.sh
            ./get_helm.sh

        - name: Deploy Release on cluster
          env:
            GCLOUD_KEY: ${{ secrets.GCLOUD_KEY }}
          run: |
            echo "$GCLOUD_KEY" | base64 --decode > ${HOME}/gcloud.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud.json
            gcloud auth configure-docker
            gcloud container clusters get-credentials \
            ${{ env.CLUSTER_NAME }} --zone 
            ${{ env.CLUSTER_ZONE }} --project ${{ env.PROJECT_NAME }}
            helm upgrade --install backend ./deploy/helm/backend \
                      --values ./deploy/helm/backend/env.values.${{ env.CLUSTER_ENV }}.yaml \
                      --set echo "env_values.image_version=${{ env.RELEASE_VERSION }}" >> $GITHUB_ENV